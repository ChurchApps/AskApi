service: ask-api

useDotenv: true

custom:
  stage: ${opt:stage, 'dev'}
  env: ${lower(${self:custom.stage})}
  layerName: ${self:service}-dependencies-${self:custom.stage}
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    useChildProcesses: true
    noTimeout: true

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 512
  timeout: 10
  region: ${env:AWS_REGION, 'us-east-2'}
  stage: ${self:custom.stage}
  iam:
    role: arn:aws:iam::${aws:accountId}:role/ChurchAppsRole
  environment:
    APP_ENV: ${self:custom.env}

package:
  individually: true
  patterns:
    - "!.git/**"
    - "!.gitignore"
    - "!README.md"
    - "!*.md"
    - "!node_modules/**"
    - "!src/**"
    - "!tools/**"
    - "!playground/**"
    - "!package-lock.json"
    - "!tsconfig.json"
    - "!eslint.config.js"
    - "!dotenv.sample.txt"
    - "dist/**"
    - "lambda.js"

layers:
  dependencies:
    name: ${self:custom.layerName}
    path: layer
    retain: false

functions:
  api:
    name: ask-api-${self:custom.stage}-api
    handler: lambda.universal
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true

plugins:
  - serverless-plugin-utils
  - serverless-offline